diff -ru vlc-2.1.2.orig/modules/misc/playlist/m3u.c vlc-2.1.2/modules/misc/playlist/m3u.c
--- vlc-2.1.2.orig/modules/misc/playlist/m3u.c	2013-06-24 21:00:38.000000000 +0300
+++ vlc-2.1.2/modules/misc/playlist/m3u.c	2014-01-14 16:44:56.000000000 +0200
@@ -48,7 +48,7 @@
  * Export_M3U: main export function
  *****************************************************************************/
 static void DoChildren( playlist_export_t *p_export, playlist_item_t *p_root,
-                        int (*pf_fprintf) (FILE *, const char *, ...) )
+                        int (*pf_fprintf) (FILE *, const char *, ...), int *groups_arr, int *groups_arr_idx )
 {
     /* Write header */
     fputs( "#EXTM3U\n", p_export->p_file );
@@ -64,16 +64,35 @@
 
         if( p_current->i_children >= 0 )
         {
-            DoChildren( p_export, p_current, pf_fprintf );
+            DoChildren( p_export, p_current, pf_fprintf, groups_arr, groups_arr_idx );
             continue;
         }
 
+        bool b_p2p = input_item_IsP2P(p_current->p_input);
+
         /* General info */
 
-        char *psz_uri = input_item_GetURI( p_current->p_input );
+        char *psz_uri = b_p2p ? input_item_GetP2PUrl( p_current->p_input ) : input_item_GetURI( p_current->p_input );
 
         assert( psz_uri );
 
+        if( b_p2p ) {
+            int group_id = input_item_GetP2PGroup( p_current->p_input );
+            bool b_found = false;
+            for( int gri = 0; gri < *groups_arr_idx; ++gri) {
+                if( groups_arr[gri] == group_id ) {
+                    b_found = true;
+                    break;
+                }
+            }
+            if( b_found ) {
+                free( psz_uri );
+                continue;
+            }
+            groups_arr[*groups_arr_idx] = group_id;
+            *groups_arr_idx++;
+        }
+
         char *psz_name = input_item_GetName( p_current->p_input );
         if( psz_name && strcmp( psz_uri, psz_name ) )
         {
@@ -108,11 +127,13 @@
         vlc_mutex_unlock( &p_current->p_input->lock );
 
         /* Stupid third party players don't understand file: URIs. */
-        char *psz_path = make_path( psz_uri );
-        if( psz_path != NULL )
-        {
-            free( psz_uri );
-            psz_uri = psz_path;
+        if(!b_p2p) {
+            char *psz_path = make_path( psz_uri );
+            if( psz_path != NULL )
+            {
+                free( psz_uri );
+                psz_uri = psz_path;
+            }
         }
         fprintf( p_export->p_file, "%s\n", psz_uri );
         free( psz_uri );
@@ -125,7 +146,9 @@
 
     msg_Dbg( p_export, "saving using M3U format");
 
-    DoChildren( p_export, p_export->p_root, utf8_fprintf );
+    int groups_arr[p_export->p_root->i_children];
+	int groups_arr_idx = 0;
+    DoChildren( p_export, p_export->p_root, utf8_fprintf, groups_arr, &groups_arr_idx );
     return VLC_SUCCESS;
 }
 
@@ -135,6 +158,8 @@
 
     msg_Dbg( p_export, "saving using M3U8 format");
 
-    DoChildren( p_export, p_export->p_root, fprintf );
+    int groups_arr[p_export->p_root->i_children];
+	int groups_arr_idx = 0;
+    DoChildren( p_export, p_export->p_root, fprintf, groups_arr, &groups_arr_idx );
     return VLC_SUCCESS;
 }
diff -ru vlc-2.1.2.orig/modules/misc/playlist/xspf.c vlc-2.1.2/modules/misc/playlist/xspf.c
--- vlc-2.1.2.orig/modules/misc/playlist/xspf.c	2013-06-24 21:00:38.000000000 +0300
+++ vlc-2.1.2/modules/misc/playlist/xspf.c	2014-01-14 16:52:53.000000000 +0200
@@ -57,7 +57,7 @@
  * \param p_i_count counter for track identifiers
  */
 static void xspf_export_item( playlist_item_t *p_item, FILE *p_file,
-                              int *p_i_count )
+                              int *p_i_count, int *groups_arr, int *groups_arr_idx )
 {
     if( !p_item ) return;
 
@@ -65,7 +65,7 @@
     if( p_item->i_children > 0 )
     {
         for( int i = 0; i < p_item->i_children; i++ )
-            xspf_export_item( p_item->pp_children[i], p_file, p_i_count );
+            xspf_export_item( p_item->pp_children[i], p_file, p_i_count, groups_arr, groups_arr_idx );
         return;
     }
 
@@ -78,22 +78,51 @@
     mtime_t i_duration;
 
     /* leaves can be written directly */
-    fputs( "\t\t<track>\n", p_file );
+    //fputs( "\t\t<track>\n", p_file );
 
     /* -> the location */
 
     char *psz_uri = input_xml( p_input, input_item_GetURI );
-    if( psz_uri && *psz_uri )
-        fprintf( p_file, "\t\t\t<location>%s</location>\n", psz_uri );
+    
+    bool b_p2p = input_item_IsP2P(p_input);
+    if( b_p2p ) {
+        char *psz_p2p_url = input_xml( p_input, input_item_GetP2PUrl );
+        int group_id = input_item_GetP2PGroup( p_input );
+        bool b_found = false;
+		for( int i = 0; i < *groups_arr_idx; ++i) {
+			if( groups_arr[i] == group_id ) {
+				b_found = true;
+				break;
+			}
+		}
+        if( b_found )
+            return;
+        groups_arr[*groups_arr_idx] = group_id;
+		*groups_arr_idx++;
+        fputs( "\t\t<track>\n", p_file );
+        if( psz_p2p_url && *psz_p2p_url ) {
+            fprintf( p_file, "\t\t\t<location>%s</location>\n", psz_p2p_url );
+            free(psz_p2p_url);
+        }
+    }
+    else {
+        fputs( "\t\t<track>\n", p_file );
+        if( psz_uri && *psz_uri )
+            fprintf( p_file, "\t\t\t<location>%s</location>\n", psz_uri );
+    }
 
     /* -> the name/title (only if different from uri)*/
-    psz = input_xml( p_input, input_item_GetTitle );
+    if( b_p2p )
+        psz = input_xml( p_input, input_item_GetTitleFbName );
+    else
+        psz = input_xml( p_input, input_item_GetTitle );
+
     if( psz && strcmp( psz_uri, psz ) )
         fprintf( p_file, "\t\t\t<title>%s</title>\n", psz );
     free( psz );
     free( psz_uri );
 
-    if( p_item->p_input->p_meta == NULL )
+    if( p_item->p_input->p_meta == NULL || b_p2p )
     {
         goto xspfexportitem_end;
     }
@@ -139,10 +168,12 @@
 
 xspfexportitem_end:
     /* -> the duration */
-    i_duration = input_item_GetDuration( p_item->p_input );
-    if( i_duration > 0 )
-        fprintf( p_file, "\t\t\t<duration>%"PRIu64"</duration>\n",
-                 i_duration / 1000 );
+    if( !b_p2p ) {
+        i_duration = input_item_GetDuration( p_item->p_input );
+        if( i_duration > 0 )
+            fprintf( p_file, "\t\t\t<duration>%"PRIu64"</duration>\n",
+                     i_duration / 1000 );
+    }
 
     /* export the intenal id and the input's options (bookmarks, ...)
      * in <extension> */
@@ -179,7 +210,7 @@
  * \param p_i_count counter for track identifiers
  */
 static void xspf_extension_item( playlist_item_t *p_item, FILE *p_file,
-                                 int *p_i_count )
+                                 int *p_i_count, int *groups_arr_ext, int *groups_arr_ext_idx )
 {
     if( !p_item ) return;
 
@@ -196,13 +227,29 @@
 
         for( i = 0; i < p_item->i_children; i++ )
         {
-            xspf_extension_item( p_item->pp_children[i], p_file, p_i_count );
+            xspf_extension_item( p_item->pp_children[i], p_file, p_i_count, groups_arr_ext, groups_arr_ext_idx );
         }
 
         fprintf( p_file, "\t\t</vlc:node>\n" );
         return;
     }
-
+    
+    bool b_p2p = input_item_IsP2P(p_item->p_input);
+    if( b_p2p ) {
+        int group_id = input_item_GetP2PGroup(p_item->p_input);
+        bool b_found = false;
+		for( int i = 0; i < *groups_arr_ext_idx; ++i) {
+			if( groups_arr_ext[i] == group_id ) {
+				b_found = true;
+				break;
+			}
+		}
+        if( b_found ) {
+            return;
+        }
+        groups_arr_ext[*groups_arr_ext_idx] = group_id;
+		*groups_arr_ext_idx++;
+    }
 
     /* print leaf and increase the counter */
     fprintf( p_file, "\t\t\t<vlc:item tid=\"%i\"/>\n", *p_i_count );
@@ -244,13 +291,20 @@
     /* export all items in a flat format */
     fprintf( p_export->p_file, "\t<trackList>\n" );
     i_count = 0;
+
+    int groups_arr[p_node->i_children];
+	int groups_arr_idx = 0;
+
     for( i = 0; i < p_node->i_children; i++ )
     {
         xspf_export_item( p_node->pp_children[i], p_export->p_file,
-                          &i_count );
+                          &i_count, groups_arr, &groups_arr_idx );
     }
     fprintf( p_export->p_file, "\t</trackList>\n" );
 
+    int groups_arr_ext[p_node->i_children];
+	int groups_arr_ext_idx = 0;
+    
     /* export the tree structure in <extension> */
     fprintf( p_export->p_file, "\t<extension application=\"" \
              "http://www.videolan.org/vlc/playlist/0\">\n" );
@@ -258,7 +312,7 @@
     for( i = 0; i < p_node->i_children; i++ )
     {
         xspf_extension_item( p_node->pp_children[i], p_export->p_file,
-                             &i_count );
+                             &i_count, groups_arr_ext, &groups_arr_ext_idx );
     }
     fprintf( p_export->p_file, "\t</extension>\n" );
 
