--- vlc-2.1.4.orig/modules/gui/qt4/util/input_slider.cpp	2014-02-14 19:40:50.000000000 +0200
+++ vlc-2.1.4/modules/gui/qt4/util/input_slider.cpp	2014-03-05 18:00:31.212232919 +0200
@@ -63,10 +63,21 @@
     chapters = NULL;
     mHandleLength = -1;
     b_seekable = true;
-    alternativeStyle = NULL;
+    //alternativeStyle = NULL;
+    
+    b_disableDragSeek = false;
+    b_isLive = false;
+    b_ignore_next_is_live_changing = false;
+    live_first = 0; 
+    live_last = 0;
+    pos = 0;
+    first_ts = 0;
+    last_ts = 0;
+    last = 0;
+    f_buffer_pos = .0;
 
     // prepare some static colors
-    QPalette p = palette();
+    /*QPalette p = palette();
     QColor background = p.color( QPalette::Active, QPalette::Window );
     tickpointForeground = p.color( QPalette::Active, QPalette::WindowText );
     tickpointForeground.setHsv( tickpointForeground.hue(),
@@ -93,7 +104,7 @@
         shadowBase = QColor( 60, 60, 60 ); // Palette's shadow is too bright
     shadowDark = shadowBase.darker( 150 );
     shadowLight = shadowBase.lighter( 180 );
-    shadowLight.setAlpha( 50 );
+    shadowLight.setAlpha( 50 );*/
 
     /* Timer used to fire intermediate updatePos() when sliding */
     seekLimitTimer = new QTimer( this );
@@ -113,11 +124,11 @@
 
     /* Use the new/classic style */
     setMinimumHeight( 18 );
-    if( !b_classic )
-    {
-        alternativeStyle = new SeekStyle;
-        setStyle( alternativeStyle );
-    }
+    //if( !b_classic )
+    //{
+    //    alternativeStyle = new SeekStyle;
+    //    setStyle( alternativeStyle );
+    //}
 
     /* Init to 0 */
     setPosition( -1.0, 0, 0 );
@@ -141,8 +152,8 @@
 SeekSlider::~SeekSlider()
 {
     delete chapters;
-    if ( alternativeStyle )
-        delete alternativeStyle;
+    //if ( alternativeStyle )
+    //    delete alternativeStyle;
 }
 
 /***
@@ -176,23 +187,93 @@
     else
         setEnabled( b_seekable );
 
-    if( !isSliding )
-        setValue( (int)( pos * 1000.0 ) );
+    if( !b_isLive ) {
+        if( !isSliding )
+            setValue( (int)( pos * 1000.0 ) );
+
+        inputLength = length;
+    }
+}
+
+void SeekSlider::isLiveStreamMode( bool is_live )
+{
+    if( !b_ignore_next_is_live_changing ) {
+        b_isLive = is_live;
+        if( !b_isLive ) {
+            setValue( 0 );
+            inputLength = 0;
+            f_buffer_pos = .0;
+        }
+    }
+    else
+        b_ignore_next_is_live_changing = false;
+}
 
-    inputLength = length;
+void SeekSlider::setLivePosition( int _live_first, int _live_last, int _pos, int _first_ts, int _last_ts, int _last, int _buffer_pieces )
+{
+    if( !b_isLive )
+        return;
+    live_first = _live_first; 
+    live_last = _live_last;
+    pos = _pos;
+    first_ts = _first_ts;
+    last_ts = _last_ts;
+    last = _last;
+    
+    inputLength = last_ts - first_ts;
+    
+    if( !isSliding ) {
+        int range = 0;
+        if( live_last > live_first )
+            range = live_last - live_first;
+        else
+            range = last - live_first + live_last;
+
+        int current = 0;
+        if( (live_first < pos) && (pos < last) )
+            current = pos - live_first;
+        else
+            current = last - live_first + pos;
+        double __pos = (double)current / (double)range;
+        
+        f_buffer_pos = ((float)(range - _buffer_pieces) / (float)range) * 1000.0;
+        
+        if( __pos>1.0 ) __pos = 1.0;
+        setValue( (int)(__pos * 1000.0 ) );
+    }
 }
 
 void SeekSlider::startSeekTimer()
 {
     /* Only fire one update, when sliding, every 150ms */
-    if( isSliding && !seekLimitTimer->isActive() )
+    if( !b_disableDragSeek && isSliding && !seekLimitTimer->isActive() )
         seekLimitTimer->start( 150 );
 }
 
 void SeekSlider::updatePos()
 {
-    float f_pos = (float)( value() ) / 1000.0;
-    emit sliderDragged( f_pos ); /* Send new position to VLC's core */
+    if( !b_isLive ) {
+        float f_pos = (float)( value() ) / 1000.0;
+        emit sliderDragged( f_pos ); /* Send new position to VLC's core */
+    }
+    else {
+        float pos = (float)( value() ) / 1000.0;
+        int range = 0;
+        int seekPos = 0;
+        if( live_last > live_first ) {
+            range = live_last - live_first;
+            seekPos = live_first + (int)(range * pos);
+        }
+        else {
+            range = last - live_first + live_last;
+            int delta = (int)(range * pos);
+            if( delta > last - live_first )
+                seekPos = delta - (last - live_first);
+            else
+                seekPos = live_first + delta;
+        }
+        emit liveSeek( seekPos );
+    }
 }
 
 void SeekSlider::updateBuffering( float f_buffering_ )
@@ -205,14 +286,14 @@
 {
     if ( !isSliding && !isJumping ) return;
     isSliding = false;
-    bool b_seekPending = seekLimitTimer->isActive();
+    //bool b_seekPending = seekLimitTimer->isActive();
     seekLimitTimer->stop(); /* We're not sliding anymore: only last seek on release */
     if ( isJumping )
     {
         isJumping = false;
         return;
     }
-    if( b_seekPending && isEnabled() )
+    if( /*b_seekPending &&*/ isEnabled() )
         updatePos();
 }
 
@@ -305,10 +386,17 @@
         int margin = handleLength() / 2;
         int posX = qMax( rect().left() + margin, qMin( rect().right() - margin, event->x() ) );
 
-        QString chapterLabel;
+        if( b_isLive ) {
+            secstotimestr( psz_length, ( (size().width() - posX) * inputLength) / size().width() );
+            QString tmp = "-";
+            tmp.append(psz_length);
+            mTimeTooltip->setText( tmp, "" );
+        }
+        else {
+            QString chapterLabel;
 
-        if ( orientation() == Qt::Horizontal ) /* TODO: vertical */
-        {
+            if ( orientation() == Qt::Horizontal ) /* TODO: vertical */
+            {
                 QList<SeekPoint> points = chapters->getPoints();
                 int i_selected = -1;
                 bool b_startsnonzero = false;
@@ -322,13 +410,18 @@
                 }
                 if ( i_selected >= 0 && i_selected < points.size() )
                     chapterLabel = points.at( i_selected ).name;
+            }
+
+            secstotimestr( psz_length, ( posX * inputLength ) / size().width() );
+            mTimeTooltip->setText( psz_length, chapterLabel );
         }
 
         QPoint target( event->globalX() - ( event->x() - posX ),
                   QWidget::mapToGlobal( QPoint( 0, 0 ) ).y() );
         if( likely( size().width() > handleLength() ) ) {
             secstotimestr( psz_length, ( ( posX - margin ) * inputLength ) / ( size().width() - handleLength() ) );
-            mTimeTooltip->setTip( target, psz_length, chapterLabel );
+            //mTimeTooltip->setTip( target, psz_length, chapterLabel );
+            mTimeTooltip->setPos( target ); // move( p )
         }
     }
     event->accept();
@@ -450,6 +543,230 @@
             || hideHandleTimer->isActive();
 }
 
+QSize SeekSlider::handleSize() const
+{
+    const int size = ( orientation() == Qt::Horizontal ? height() : width() );
+    return QSize( size, size );
+}
+
+void SeekSlider::paintEvent( QPaintEvent *event ) 
+{
+    if( b_classic )
+        return QSlider::paintEvent( event );
+
+    QStyleOptionSlider option;
+    initStyleOption( &option );
+
+    /* */
+    QPainter painter( this );
+    painter.setRenderHints( QPainter::Antialiasing );
+
+    // draw bar
+    const int barCorner = 3;
+    qreal sliderPos     = -1;
+    int range           = MAXIMUM;
+    QRect barRect       = rect();
+
+    // adjust positions based on the current orientation
+    if ( option.sliderPosition != 0 )
+    {
+        switch ( orientation() )
+        {
+            case Qt::Horizontal:
+                sliderPos = ( ( (qreal)width() ) / (qreal)range )
+                        * (qreal)option.sliderPosition;
+                break;
+            case Qt::Vertical:
+                sliderPos = ( ( (qreal)height() ) / (qreal)range )
+                        * (qreal)option.sliderPosition;
+                break;
+        }
+    }
+
+    switch ( orientation() )
+    {
+        case Qt::Horizontal:
+            barRect.setHeight( height() /2 );
+            break;
+        case Qt::Vertical:
+            barRect.setWidth( width() /2 );
+            break;
+    }
+
+    barRect.moveCenter( rect().center() );
+
+    // set the background color and gradient
+    QColor backgroundBase( palette().window().color() );
+    QLinearGradient backgroundGradient( 0, 0, 0, height() );
+    backgroundGradient.setColorAt( 0.0, backgroundBase.darker( 140 ) );
+    backgroundGradient.setColorAt( 1.0, backgroundBase );
+
+    // set the foreground color and gradient
+    QColor foregroundBase( 50, 156, 255 );
+    QLinearGradient foregroundGradient( 0, 0, 0, height() );
+    foregroundGradient.setColorAt( 0.0,  foregroundBase );
+    foregroundGradient.setColorAt( 1.0,  foregroundBase.darker( 140 ) );
+
+    // draw a slight 3d effect on the bottom
+    painter.setPen( QColor( 230, 230, 230 ) );
+    painter.setBrush( Qt::NoBrush );
+    painter.drawRoundedRect( barRect.adjusted( 0, 2, 0, 0 ), barCorner, barCorner );
+
+    // draw background
+    painter.setPen( Qt::NoPen );
+    painter.setBrush( backgroundGradient );
+    painter.drawRoundedRect( barRect, barCorner, barCorner );
+
+    // adjusted foreground rectangle
+    QRect valueRect = barRect.adjusted( 1, 1, -1, 0 );
+    
+    switch ( orientation() )
+    {
+        case Qt::Horizontal:
+            valueRect.setWidth( b_isLive ? width() - int( sliderPos ) : qMin( width(), int( sliderPos ) ) );
+            if( b_isLive )
+                valueRect.moveRight( rect().right() );
+            break;
+        case Qt::Vertical:
+            valueRect.setHeight( b_isLive ? height() - sliderPos : qMin( height(), int( sliderPos ) ) );
+            if( b_isLive )
+                valueRect.moveTop( rect().top() );
+            else
+                valueRect.moveBottom( rect().bottom() );
+            break;
+    }
+
+
+    if ( option.sliderPosition > minimum() && option.sliderPosition <= maximum() )
+    {
+        // draw foreground
+        if( b_isLive ) {
+            QColor liveColor = QColor( "Orange" );
+            painter.setBrush( liveColor );
+            painter.setPen( Qt::NoPen );
+            painter.drawRoundedRect( valueRect, barCorner, barCorner );
+        }
+        else {
+            painter.setPen( Qt::NoPen );
+            painter.setBrush( foregroundGradient );
+            painter.drawRoundedRect( valueRect, barCorner, barCorner );
+        }
+    }
+
+    if( b_isLive &&  f_buffer_pos != 0 ) {
+    
+        QRect bufferRect = barRect.adjusted( 1, 1, -1, 0 );
+        qreal bufferPos = -1;
+        switch ( orientation() )
+        {
+            case Qt::Horizontal:
+                bufferPos = qMax( sliderPos, ( (qreal)width() / (qreal)range ) * (qreal)f_buffer_pos );
+                bufferRect.setWidth( width() - int( bufferPos ) );
+                bufferRect.moveRight( rect().right() );
+                break;
+            case Qt::Vertical:
+                bufferPos = qMax( sliderPos, ( (qreal)height() / (qreal)range ) * (qreal)f_buffer_pos );
+                bufferRect.setHeight( height() - bufferPos );
+                bufferRect.moveTop( rect().top() );
+                break;
+        }
+        
+        painter.setPen( Qt::NoPen );
+        painter.setBrush( foregroundGradient );
+        painter.drawRoundedRect( bufferRect, barCorner, barCorner );
+    }
+    
+    // draw buffering overlay
+    if ( f_buffering < 1.0 )
+    {
+        QRect innerRect = barRect.adjusted( 1, 1,
+                            barRect.width() * ( -1.0 + f_buffering ) - 1, 0 );
+        QColor overlayColor = QColor( "Orange" );
+        overlayColor.setAlpha( 128 );
+        painter.setBrush( overlayColor );
+        painter.drawRoundedRect( innerRect, barCorner, barCorner );
+    }
+
+    if ( option.state & QStyle::State_MouseOver || isAnimationRunning() )
+    {
+        /* draw chapters tickpoints */
+        if ( chapters && inputLength && size().width() )
+        {
+            QColor background = palette().color( QPalette::Active, QPalette::Background );
+            QColor foreground = palette().color( QPalette::Active, QPalette::WindowText );
+            foreground.setHsv( foreground.hue(),
+                            ( background.saturation() + foreground.saturation() ) / 2,
+                            ( background.value() + foreground.value() ) / 2 );
+            if ( orientation() == Qt::Horizontal ) /* TODO: vertical */
+            {
+                QList<SeekPoint> points = chapters->getPoints();
+                foreach( SeekPoint point, points )
+                {
+                    int x = point.time / 1000000.0 / inputLength * size().width();
+                    painter.setPen( foreground );
+                    painter.setBrush( Qt::NoBrush );
+                    painter.drawLine( x, height(), x, height() - CHAPTERSSPOTSIZE );
+                }
+            }
+        }
+
+        // draw handle
+        if ( sliderPos != -1 )
+        {
+            const int margin = 0;
+            QSize hSize = handleSize() - QSize( 6, 6 );
+            QPoint pos;
+
+            switch ( orientation() )
+            {
+                case Qt::Horizontal:
+                    pos = QPoint( sliderPos - ( hSize.width() / 2 ), 2 );
+                    pos.rx() = qMax( margin, pos.x() );
+                    pos.rx() = qMin( width() - hSize.width() - margin, pos.x() );
+                    break;
+                case Qt::Vertical:
+                    pos = QPoint( 2, height() - ( sliderPos + ( hSize.height() / 2 ) ) );
+                    pos.ry() = qMax( margin, pos.y() );
+                    pos.ry() = qMin( height() - hSize.height() - margin, pos.y() );
+                    break;
+            }
+
+            QPalette p;
+            QPoint shadowPos( pos - QPoint( 2, 2 ) );
+            QSize sSize( handleSize() - QSize( 2, 2 ) );
+
+            // prepare the handle's gradient
+            QLinearGradient handleGradient( 0, 0, 0, hSize.height() );
+            handleGradient.setColorAt( 0.0, p.window().color().lighter( 120 ) );
+            handleGradient.setColorAt( 0.9, p.window().color().darker( 120 ) );
+
+            // prepare the handle's shadow gradient
+            QColor shadowBase = p.shadow().color();
+            if( shadowBase.lightness() > 100 )
+                shadowBase = QColor( 60, 60, 60 ); // Palette's shadow is too bright
+            QColor shadowDark( shadowBase.darker( 150 ) );
+            QColor shadowLight( shadowBase.lighter( 180 ) );
+            shadowLight.setAlpha( 50 );
+
+            QRadialGradient shadowGradient( shadowPos.x() + ( sSize.width() / 2 ),
+                                            shadowPos.y() + ( sSize.height() / 2 ),
+                                            qMax( sSize.width(), sSize.height() ) / 2 );
+            shadowGradient.setColorAt( 0.4, shadowDark );
+            shadowGradient.setColorAt( 1.0, shadowLight );
+
+            painter.setPen( Qt::NoPen );
+            painter.setOpacity( mHandleOpacity );
+
+            // draw the handle's shadow
+            painter.setBrush( shadowGradient );
+            painter.drawEllipse( shadowPos.x(), shadowPos.y() + 1, sSize.width(), sSize.height() );
+
+            // finally draw the handle
+            painter.setBrush( handleGradient );
+            painter.drawEllipse( pos.x(), pos.y(), hSize.width(), hSize.height() );
+        }
+    }
+}
 
 /* This work is derived from Amarok's work under GPLv2+
     - Mark Kretschmann
