diff -ru vlc-2.1.2.orig/modules/lua/libs/playlist.c vlc-2.1.2/modules/lua/libs/playlist.c
--- vlc-2.1.2.orig/modules/lua/libs/playlist.c	2013-06-24 21:00:38.000000000 +0300
+++ vlc-2.1.2/modules/lua/libs/playlist.c	2014-01-14 16:38:42.000000000 +0200
@@ -392,6 +392,46 @@
     return 1;
 }
 
+static int vlclua_playlist_enqueue_acestream_torrent( lua_State *L )
+{
+    int i_count;
+    vlc_object_t *p_this = vlclua_get_this( L );
+    playlist_t *p_playlist = vlclua_get_playlist_internal( L );
+    i_count = vlclua_playlist_add_internal_p2p_torrent( p_this, L, p_playlist, false );
+    lua_pushinteger( L, i_count );
+    return 1;
+}
+
+static int vlclua_playlist_play_acestream_torrent( lua_State *L )
+{
+    int i_count;
+    vlc_object_t *p_this = vlclua_get_this( L );
+    playlist_t *p_playlist = vlclua_get_playlist_internal( L );
+    i_count = vlclua_playlist_add_internal_p2p_torrent( p_this, L, p_playlist, true );
+    lua_pushinteger( L, i_count );
+    return 1;
+}
+
+static int vlclua_playlist_enqueue_acestream_content_id( lua_State *L )
+{
+    int i_count;
+    vlc_object_t *p_this = vlclua_get_this( L );
+    playlist_t *p_playlist = vlclua_get_playlist_internal( L );
+    i_count = vlclua_playlist_add_internal_p2p_cid( p_this, L, p_playlist, false );
+    lua_pushinteger( L, i_count );
+    return 1;
+}
+
+static int vlclua_playlist_play_acestream_content_id( lua_State *L )
+{
+    int i_count;
+    vlc_object_t *p_this = vlclua_get_this( L );
+    playlist_t *p_playlist = vlclua_get_playlist_internal( L );
+    i_count = vlclua_playlist_add_internal_p2p_cid( p_this, L, p_playlist, true );
+    lua_pushinteger( L, i_count );
+    return 1;
+}
+
 /*****************************************************************************
  *
  *****************************************************************************/
@@ -418,6 +458,10 @@
     { "status", vlclua_playlist_status },
     { "delete", vlclua_playlist_delete },
     { "move", vlclua_playlist_move },
+    { "enqueue_torrent", vlclua_playlist_enqueue_acestream_torrent },
+    { "play_torrent", vlclua_playlist_play_acestream_torrent },
+    { "enqueue_content_id", vlclua_playlist_enqueue_acestream_content_id },
+    { "play_content_id", vlclua_playlist_play_acestream_content_id },
     { NULL, NULL }
 };
 
diff -ru vlc-2.1.2.orig/modules/lua/vlc.c vlc-2.1.2/modules/lua/vlc.c
--- vlc-2.1.2.orig/modules/lua/vlc.c	2013-07-05 12:11:30.000000000 +0300
+++ vlc-2.1.2/modules/lua/vlc.c	2014-01-14 16:36:32.000000000 +0200
@@ -536,51 +536,74 @@
                     /* playlist key item path name item */
                     vlclua_read_options( p_this, L, &i_options, &ppsz_options );
 
-                    /* Create input item */
-                    p_input = input_item_NewExt( psz_path, psz_name, i_options,
-                                                (const char **)ppsz_options,
-                                                VLC_INPUT_OPTION_TRUSTED,
-                                                i_duration );
-                    lua_pop( L, 3 ); /* pop "path name item" */
-                    /* playlist key item */
-
-                    /* Read meta data: item must be on top of stack */
-                    vlclua_read_meta_data( p_this, L, p_input );
-
-                    /* copy the original URL to the meta data, if "URL" is still empty */
-                    char* url = input_item_GetURL( p_input );
-                    if( url == NULL && p_parent)
-                    {
-                        EnsureUTF8( psz_oldurl );
-                        msg_Dbg( p_this, "meta-URL: %s", psz_oldurl );
-                        input_item_SetURL ( p_input, psz_oldurl );
+                    p2p_uri_id_type_t p2p_uri_type;
+                    p2p_uri_type = p2p_GetIdTypeWithOptArray(psz_path, i_options, ppsz_options);
+                    if(p2p_uri_type == P2P_TYPE_UNSUPPORT) {
+                        /* Create input item */
+                        p_input = input_item_NewExt( psz_path, psz_name, i_options,
+                                                    (const char **)ppsz_options,
+                                                    VLC_INPUT_OPTION_TRUSTED,
+                                                    i_duration );
+                        lua_pop( L, 3 ); /* pop "path name item" */
+                        /* playlist key item */
+                        
+                        /* Read meta data: item must be on top of stack */
+                        vlclua_read_meta_data( p_this, L, p_input );
+                        
+                        /* copy the original URL to the meta data, if "URL" is still empty */
+                        char* url = input_item_GetURL( p_input );
+                        if( url == NULL && p_parent)
+                        {
+                            EnsureUTF8( psz_oldurl );
+                            msg_Dbg( p_this, "meta-URL: %s", psz_oldurl );
+                            input_item_SetURL ( p_input, psz_oldurl );
+                        }
+                        free( psz_oldurl );
+                        free( url );
+
+                        /* copy the psz_name to the meta data, if "Title" is still empty */
+                        char* title = input_item_GetTitle( p_input );
+                        if( title == NULL )
+                            input_item_SetTitle ( p_input, psz_name );
+                        free( title );
+
+                        /* Read custom meta data: item must be on top of stack*/
+                        vlclua_read_custom_meta_data( p_this, L, p_input );
+                        
+                        /* Append item to playlist */
+                        if( p_parent ) /* Add to node */
+                        {
+                            input_item_CopyOptions( p_parent, p_input );
+                            input_item_node_AppendItem( p_parent_node, p_input );
+                        }
+                        else /* Play or Enqueue (preparse) */
+                            /* FIXME: playlist_AddInput() can fail */
+                            playlist_AddInput( p_playlist, p_input,
+                                   PLAYLIST_APPEND |
+                                   ( b_play ? PLAYLIST_GO : PLAYLIST_PREPARSE ),
+                                   PLAYLIST_END, true, false );
+                        i_count ++; /* increment counter */
+                        vlc_gc_decref( p_input );
                     }
-                    free( psz_oldurl );
-                    free( url );
+                    else {
+                        char *id = NULL;
+                        if(p2p_uri_type != P2P_TYPE_PLAYER && p2p_uri_type != P2P_TYPE_RAW)
+                            id = (strstr(psz_path, "://") == NULL) ? vlc_path2uri(psz_path, NULL) : strdup(psz_path);
+                        else
+                            id = strdup(psz_path);
+                        
+                        p2p_LoadWithOptArray( p2p_Get(p_playlist), id, psz_name,
+                                p2p_uri_type, p2p_LoadAsync, i_options, ( i_options ? ppsz_options : NULL ),
+                                PLAYLIST_INSERT, p2p_LoadAddInput, NULL,
+                                true, b_play, 
+                                P2P_DEV, P2P_AFF, P2P_ZONE, pl_Unlocked );
+                            
+                        lua_pop( L, 3 );
 
-                    /* copy the psz_name to the meta data, if "Title" is still empty */
-                    char* title = input_item_GetTitle( p_input );
-                    if( title == NULL )
-                        input_item_SetTitle ( p_input, psz_name );
-                    free( title );
-
-                    /* Read custom meta data: item must be on top of stack*/
-                    vlclua_read_custom_meta_data( p_this, L, p_input );
-
-                    /* Append item to playlist */
-                    if( p_parent ) /* Add to node */
-                    {
-                        input_item_CopyOptions( p_parent, p_input );
-                        input_item_node_AppendItem( p_parent_node, p_input );
+                        free(id);
+                        i_count ++;
                     }
-                    else /* Play or Enqueue (preparse) */
-                        /* FIXME: playlist_AddInput() can fail */
-                        playlist_AddInput( p_playlist, p_input,
-                               PLAYLIST_APPEND |
-                               ( b_play ? PLAYLIST_GO : PLAYLIST_PREPARSE ),
-                               PLAYLIST_END, true, false );
-                    i_count ++; /* increment counter */
-                    vlc_gc_decref( p_input );
+
                     while( i_options > 0 )
                         free( ppsz_options[--i_options] );
                     free( ppsz_options );
@@ -615,6 +638,94 @@
         msg_Warn( p_this, "Playlist should be a table." );
     }
     return i_count;
+}
+
+#undef vlclua_playlist_add_internal_p2p
+int vlclua_playlist_add_internal_p2p( vlc_object_t *p_this, lua_State *L, playlist_t *p_playlist, bool b_play, p2p_uri_id_type_t type )
+{
+    int i_count = 0;
+    assert( p_playlist );
+
+    if( lua_istable( L, -1 ) ) {
+        lua_pushnil( L );
+        while( lua_next( L, -2 ) ) {
+            if( lua_istable( L, -1 ) ) {
+                lua_getfield( L, -1, "path" );
+
+                if( lua_isstring( L, -1 ) ) {
+                    const char *psz_path = NULL;
+                    const char *psz_name = NULL;
+                    char **ppsz_options = NULL;
+                    int i_options = 0;
+                    bool play = false;
+
+                    psz_path = lua_tostring( L, -1 );
+                    msg_Dbg( p_this, "Path: %s", psz_path );
+
+                    lua_getfield( L, -2, "name" );
+                    if( lua_isstring( L, -1 ) ) {
+                        psz_name = lua_tostring( L, -1 );
+                        msg_Dbg( p_this, "Name: %s", psz_name );
+                    }
+                    else if( !lua_isnil( L, -1 ) )
+                            msg_Warn( p_this, "Playlist item name should be a string." );
+                    
+                    /*lua_getfield( L, -3, "play" );
+                    if( lua_isboolean( L, -1 ) ) {
+                        play =  lua_toboolean( L, -1 );
+                    }
+                    else if( !lua_isnil( L, -1 ) ) {
+                        msg_Warn( p_this, "Playlist item play should be a boolean." );
+                    }
+                    lua_pop( L, 1 ); */
+                    
+                    lua_pushvalue( L, -2 );
+                    /* playlist key item path name item */
+                    vlclua_read_options( p_this, L, &i_options, &ppsz_options );
+
+                    p2p_uri_id_type_t p2p_uri_type = p2p_GetIdTypeWithOptArray(psz_path, i_options, ppsz_options );
+                    
+                    if( p2p_uri_type == P2P_TYPE_UNSUPPORT || p2p_uri_type != type )
+                        p2p_uri_type = type;
+                    
+                    char *id;
+                    if(p2p_uri_type != P2P_TYPE_PLAYER && p2p_uri_type != P2P_TYPE_RAW)
+                        id = (strstr(psz_path, "://") == NULL) ? vlc_path2uri(psz_path, NULL) : strdup(psz_path);
+                    else
+                        id = strdup(psz_path);
+            
+                    p2p_LoadWithOptArray( p2p_Get(p_playlist), id, psz_name,
+                            p2p_uri_type, p2p_LoadAsync, i_options, ( i_options ? ppsz_options : NULL ),
+                            PLAYLIST_INSERT, p2p_LoadAddInput, NULL,
+                            true, b_play, 
+                            P2P_DEV, P2P_AFF, P2P_ZONE, pl_Unlocked );
+                            
+                    lua_pop( L, 3 );
+
+                    free(id);
+                    i_count ++;
+                    
+                    lua_pop( L, 2 ); /* pop "path name" */
+                    
+                    while( i_options > 0 )
+                        free( ppsz_options[--i_options] );
+                    free( ppsz_options );
+                }
+                else {
+                    lua_pop( L, 1 ); /* pop "path" */
+                    msg_Warn( p_this, "Playlist item's path should be a string" );
+                }
+            }
+            else {
+                msg_Warn( p_this, "Playlist should be a table." );
+            }
+            lua_pop( L, 1 );
+        }
+    }
+    else {
+        msg_Warn( p_this, "Playlist should be a table." );
+    }
+    return i_count;
 }
 
 static int vlc_sd_probe_Open( vlc_object_t *obj )
diff -ru vlc-2.1.2.orig/modules/lua/vlc.h vlc-2.1.2/modules/lua/vlc.h
--- vlc-2.1.2.orig/modules/lua/vlc.h	2013-07-08 15:39:23.000000000 +0300
+++ vlc-2.1.2/modules/lua/vlc.h	2014-01-14 16:26:55.000000000 +0200
@@ -35,6 +35,7 @@
 #include <vlc_url.h>
 #include <vlc_strings.h>
 #include <vlc_stream.h>
+#include <p2p_object.h>
 
 #define LUA_COMPAT_MODULE
 #include <lua.h>        /* Low level lua C API */
@@ -149,6 +150,10 @@
                                   input_item_t *, bool );
 #define vlclua_playlist_add_internal( a, b, c, d, e ) vlclua_playlist_add_internal( VLC_OBJECT( a ), b, c, d, e )
 
+int vlclua_playlist_add_internal_p2p( vlc_object_t *, lua_State *, playlist_t *, bool, p2p_uri_id_type_t );
+#define vlclua_playlist_add_internal_p2p_torrent( a, b, c, d ) vlclua_playlist_add_internal_p2p( VLC_OBJECT( a ), b, c, d, P2P_TYPE_TORRENT_URL )
+#define vlclua_playlist_add_internal_p2p_cid( a, b, c, d ) vlclua_playlist_add_internal_p2p( VLC_OBJECT( a ), b, c, d, P2P_TYPE_PLAYER )
+
 int vlclua_add_modules_path( lua_State *, const char *psz_filename );
 
 /**
